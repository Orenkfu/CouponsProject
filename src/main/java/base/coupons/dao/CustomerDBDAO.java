package base.coupons.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import base.coupons.beans.Coupon;
import base.coupons.beans.CouponType;
import base.coupons.beans.Customer;
import base.coupons.daoInterface.CustomerDAO;
import base.coupons.exceptions.CouponException;
import base.coupons.exceptions.NullException;

public class CustomerDBDAO implements CustomerDAO {
	private Connection con;
	private String sql;

	/**
	 * private method designed to get all coupons belonging to a single customer,
	 * with only ID values set.
	 * 
	 * 
	 * @param customer
	 *            bean object representing customer. only ID needs to be
	 *            instantiated.
	 * @param con
	 *            given by calling method.
	 * @return ArrayList containing coupons with only ID values.
	 * @throws SQLException
	 */
	private ArrayList<Coupon> getCouponId(Customer customer, Connection con) throws CouponException {
		ArrayList<Coupon> tempCoupons = new ArrayList<Coupon>();
		PreparedStatement pstmt;

		// getting coupon's ID
		sql = "SELECT * FROM Customer_Coupon WHERE (cust_id = ?)";
		try {
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, customer.getId());
			ResultSet rs = pstmt.executeQuery();

			// getting all the company coupon's ID and putting them in a temporary list
			while (rs.next()) {
				Coupon coupon = new Coupon();
				coupon.setId(rs.getLong(2));
				tempCoupons.add(coupon);
			}
			return tempCoupons;
		} catch (SQLException e) {
			throw new CouponException("database error has occurred.");
		}
	}

	private ArrayList<Coupon> getCouponIdByPage(Customer customer, Connection con, int page, int size)
			throws CouponException {
		ArrayList<Coupon> tempCoupons = new ArrayList<Coupon>();
		PreparedStatement pstmt;

		// getting coupon's ID
		sql = "SELECT * FROM Customer_Coupon WHERE (cust_id = ?)  OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";
		try {
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, customer.getId());
			pstmt.setInt(2, page * size);
			pstmt.setInt(3, size);
			ResultSet rs = pstmt.executeQuery();

			// getting all the company coupon's ID and putting them in a temporary list
			while (rs.next()) {
				Coupon coupon = new Coupon();
				coupon.setId(rs.getLong(2));
				tempCoupons.add(coupon);
			}
			return tempCoupons;
		} catch (SQLException e) {
			throw new CouponException("database error has occurred.");
		}
	}

	/**
	 * creates a new customer in Customers Table
	 * 
	 * @param Customer
	 *            object representing company to be added to database.
	 * @return Customer bean with an automatically generated ID, generated by
	 *         database.
	 * @throws CouponException
	 */
	@Override
	public Customer createCustomer(Customer customer) throws CouponException {
		con = ConnectionPool.getInstance().getConnection();
		sql = "INSERT INTO Customers(name, password) VALUES(?,?)";
		PreparedStatement pstmt;
		String name = customer.getCustName();
		String password = customer.getPassword();
		try {

			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, name);
			pstmt.setString(2, password);
			pstmt.executeUpdate();

			sql = "SELECT * FROM Customers WHERE(name = ? AND password = ?)";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, name);
			pstmt.setString(2, password);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			customer.setId(rs.getLong(1));
			// System.out.println("===TEST Customer " + customer + " Created ===");

			return customer;
		} catch (SQLException e) {
			throw new CouponException("Could not create customer, ID already exists.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	/**
	 * removes a customer from Customers table in the database.
	 * 
	 * @param Customer
	 *            bean object representing customer to be removed. only id is needed
	 *            for verification.
	 * @return boolean representing whether the customer was deleted.
	 * @throws CouponException
	 *             if database error has occurred.
	 */
	@Override
	public boolean removeCustomer(Customer customer) throws CouponException {
		Connection con = ConnectionPool.getInstance().getConnection();
		long id = customer.getId();
		sql = "DELETE FROM Customers WHERE ID = " + id;

		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			int rows = pstmt.executeUpdate();
			if (rows == 0) {
				return false;
			}
			return true;
		} catch (SQLException e) {
			throw new CouponException("failed to remove customer.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	/**
	 * method for updating the password attribute of one customer.
	 * 
	 * @param customer
	 *            bean object representing customer to be updated.
	 * @throws CouponException
	 *             - if database error has occured.
	 */
	@Override
	public void updateCustomer(Customer customer) throws CouponException {
		sql = "UPDATE Customers SET password = ? WHERE (id =  " + customer.getId() + ")";
		con = ConnectionPool.getInstance().getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, customer.getPassword());
			pstmt.executeUpdate();

		} catch (SQLException e) {
			throw new CouponException("failed to update customer " + customer.getCustName());
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	/**
	 * method for getting a specific customer. only id is needed for verification.
	 * 
	 * @param id
	 *            representing customer to be pulled from database
	 * @return Customer bean object representing customer.
	 * @throws CouponException
	 *             - if database threw an exception.
	 */
	@Override
	public Customer getCustomer(Long id) throws CouponException {
		con = ConnectionPool.getInstance().getConnection();
		sql = "SELECT * FROM Customers WHERE (ID = ?)";
		try {
			if (id == null) {
				throw new NullException("id cannot be null.");

			}
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, id);
			Customer customer = new Customer();

			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				customer.setId(rs.getLong(1));
				customer.setCustName(rs.getString(2));
				customer.setPassword(rs.getString(3));
			} else {
				CouponException ex = new CouponException("Could not find Customer with ID: " + id);
				throw ex;
			}

			return customer;
		} catch (SQLException e) {
			throw new CouponException("Failed to get customer.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	/**
	 * getter method for getting all Customers from Customer Table.
	 * 
	 * @return ArrayList listing all customers.
	 * @throws CouponException
	 *             - if database error has occurred.
	 */
	@Override
	public List<Customer> getAllCustomers() throws CouponException {
		Connection con = ConnectionPool.getInstance().getConnection();
		sql = "SELECT * FROM Customers";
		PreparedStatement pstmt;
		List<Customer> customers = new ArrayList<>();
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				Customer customer = new Customer();
				customer.setId(rs.getLong(1));
				customer.setCustName(rs.getString(2));
				customer.setPassword(rs.getString(3));
				customers.add(customer);
			}
			return customers;

		} catch (SQLException e) {
			throw new CouponException("failed to get customer list.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	public List<Customer> getAllCustomersByPage(int page, int size) throws CouponException {
		Connection con = ConnectionPool.getInstance().getConnection();
		sql = "SELECT * FROM Customers OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";
		PreparedStatement pstmt;
		List<Customer> customers = new ArrayList<>();
		try {
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, page * size);
			pstmt.setInt(2, size);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				Customer customer = new Customer();
				customer.setId(rs.getLong(1));
				customer.setCustName(rs.getString(2));
				customer.setPassword(rs.getString(3));
				customers.add(customer);
			}
			return customers;

		} catch (SQLException e) {
			throw new CouponException("failed to get customer list.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	/**
	 * method for validating login attempt by a customer, checking if username and
	 * password are correct.<br>
	 * called by logging into Coupon System and passing Customer type parameter,
	 * passed to CustomerFacade and then here.<br>
	 * this method will return "-1" id (impossible due to validation) if customer
	 * was not found. Facade will throw an exception.
	 * 
	 * @param compName
	 * @param password
	 *            parameters given by CouponSystem, rolled to facade and then to
	 *            this method, to validate their existence in the database.
	 * @return if parameters are true, an id of this customer will be returned to
	 *         facade.
	 * @throws CouponException
	 *             - if a database error has occurred.
	 */
	@Override
	public long login(String compName, String password) throws CouponException {
		con = ConnectionPool.getInstance().getConnection();
		sql = "SELECT * FROM Customers WHERE (name = ? AND password = ?)";
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, compName);
			pstmt.setString(2, password);
			ResultSet rs = pstmt.executeQuery();
			long id = -1;
			if (rs.next()) {
				id = rs.getLong(1);
				return id;
			}
			return id;
		} catch (SQLException e) {
			throw new CouponException("login failed. please try again");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	/**
	 * original login method as requested.
	 * 
	 * @param compName
	 * @param password
	 * @return
	 * @throws CouponException
	 */
	public boolean login1(String compName, String password) throws CouponException {
		con = ConnectionPool.getInstance().getConnection();
		sql = "SELECT * FROM Customers WHERE (name = ? AND password = ?)";
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, compName);
			pstmt.setString(2, password);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				return true;

			return false;
		} catch (SQLException e) {
			throw new CouponException("login failed. please try again");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	/**
	 * links a coupon bean object to a specific customer, by adding their values to
	 * the customer_coupon table. called by purchaseCoupon method in CustomerFacade.
	 * 
	 * @param coupon
	 *            bean object representing coupon to be linked.
	 * @param id
	 *            of customer to be linked to coupon.
	 * @throws CouponException
	 *             when database error has occurred, or if customer already has that
	 *             coupon.
	 */
	public void linkCouponToCustomer(Coupon coupon, Long id) throws CouponException {
		long couponId = coupon.getId();
		con = ConnectionPool.getInstance().getConnection();
		PreparedStatement pstmt;
		sql = "INSERT INTO Customer_Coupon VALUES(?,?)";
		try {
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, id);
			pstmt.setLong(2, couponId);
			int row = pstmt.executeUpdate();
			if (row == 0) {
				throw new CouponException("Unable to link Coupon.");
			}
		} catch (SQLException e) {
			throw new CouponException("could not link coupon to customer, already owns it.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}

	}

	/**
	 * method designed to get customer ID, when customer bean object exists but ID
	 * is missing.
	 * 
	 * @param customer
	 * @return id attribute of this customer.
	 * @throws CouponException
	 *             if a database error has occurred, or if customer was not found in
	 *             database.
	 */
	public Long getCustomerId(Customer customer) throws CouponException {
		con = ConnectionPool.getInstance().getConnection();
		sql = "SELECT * FROM Customers";
		Long id;
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				Customer currentCustomer = new Customer();
				currentCustomer.setId(rs.getLong(1));
				currentCustomer.setCustName(rs.getString(2));

				if (customer.getCustName().equals(currentCustomer.getCustName())) {
					id = currentCustomer.getId();
					return id;
				}
			}
			throw new CouponException("could not find customer " + customer.getCustName() + "'s ID.");
		} catch (SQLException e) {
			throw new CouponException("failed to get customer ID.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	/**
	 * getter for all coupons belonging to a single customer. calls getCouponId
	 * method and gets full details for each coupon ID.
	 * 
	 * @return an ArrayList containing all coupons belonging to a single customer.
	 * @throws CouponException
	 *             - if a database error has occurred.
	 */
	@Override
	public ArrayList<Coupon> getCoupons(Customer customer) throws CouponException {
		try {
			con = ConnectionPool.getInstance().getConnection();
			ArrayList<Coupon> tempCoupons = getCouponId(customer, con);
			sql = "SELECT * FROM Coupons WHERE (ID = ?)";
			// sending a query to get the company's coupons full details
			PreparedStatement pstmt = con.prepareStatement(sql);

			for (Coupon currentCoupon : tempCoupons) {

				// setting where conditions to current coupon in the list
				pstmt.setLong(1, currentCoupon.getId());
				ResultSet rs = pstmt.executeQuery();
				if (rs.next()) {
					// finally getting all the coupon's details in templist
					currentCoupon.setTitle(rs.getString(2));
					currentCoupon.setStartDate(rs.getTimestamp(3));
					currentCoupon.setEndDate(rs.getTimestamp(4));
					currentCoupon.setAmount(rs.getInt(5));
					currentCoupon.setType(CouponType.valueOf(rs.getString(6)));
					currentCoupon.setMessage(rs.getString(7));
					currentCoupon.setImage(rs.getString(9));
					currentCoupon.setPrice(rs.getDouble(8));
				}
			}
			return tempCoupons;
		} catch (SQLException e) {
			throw new CouponException("Failed to get " + customer.getCustName() + "'s coupons.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	public List<Coupon> getPurchasedCouponsByPage(Customer customer, Integer page, int page_size)
			throws CouponException {
		try {
			con = ConnectionPool.getInstance().getConnection();
			ArrayList<Coupon> tempCoupons = getCouponIdByPage(customer, con, page, page_size);
			sql = "SELECT * FROM Coupons WHERE (ID = ?)";
			// sending a query to get the company's coupons full details
			PreparedStatement pstmt = con.prepareStatement(sql);

			for (Coupon currentCoupon : tempCoupons) {

				// setting where conditions to current coupon in the list
				pstmt.setLong(1, currentCoupon.getId());
				ResultSet rs = pstmt.executeQuery();
				if (rs.next()) {
					// finally getting all the coupon's details in templist
					currentCoupon.setTitle(rs.getString(2));
					currentCoupon.setStartDate(rs.getTimestamp(3));
					currentCoupon.setEndDate(rs.getTimestamp(4));
					currentCoupon.setAmount(rs.getInt(5));
					currentCoupon.setType(CouponType.valueOf(rs.getString(6)));
					currentCoupon.setMessage(rs.getString(7));
					currentCoupon.setImage(rs.getString(9));
					currentCoupon.setPrice(rs.getDouble(8));
				}
			}
			return tempCoupons;
		} catch (SQLException e) {
			throw new CouponException("Failed to get " + customer.getCustName() + "'s coupons.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

}
