package base.coupons.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import base.coupons.beans.Company;
import base.coupons.beans.Coupon;
import base.coupons.beans.CouponType;
import base.coupons.daoInterface.CompanyDAO;
import base.coupons.exceptions.CouponException;
import base.coupons.exceptions.DoesntExistException;
import base.coupons.exceptions.NullException;

public class CompanyDBDAO implements CompanyDAO {
	private String sql;
	private Connection con;

	/**
	 * creates a new company in Companies Table
	 * 
	 * @param Company
	 *            object representing company to be added to database.
	 * @return Company object with an automatically generated ID, generated by
	 *         database.
	 * @throws CouponException
	 */
	@Override
	public Company createCompany(Company company) throws CouponException {

		con = ConnectionPool.getInstance().getConnection();
		sql = "INSERT INTO Companies (name, password, email) VALUES(?,?,?)";
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, company.getCompName());
			pstmt.setString(2, company.getPassword());
			pstmt.setString(3, company.getEmail());
			pstmt.executeUpdate();

			// System.out.println("===========================");

			sql = "SELECT * FROM Companies WHERE(name = ? AND email = ?)";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, company.getCompName());
			pstmt.setString(2, company.getEmail());
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			company.setId(rs.getLong(1));
			// System.out.println("===TEST Company " + company + " Created ===");

		} catch (SQLException e) {
			throw new CouponException("Company ID already exists.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
		return company;
	}

	/**
	 * removes a company from Companies table in the database.
	 * 
	 * @param Company
	 *            bean object representing company to be removed. only id is needed
	 *            for verification.
	 * @return boolean representing whether the company was deleted.
	 * @throws CouponException
	 *             if database error has occured.
	 */
	@Override
	public boolean removeCompany(Company company) throws CouponException {
		con = ConnectionPool.getInstance().getConnection();
		long id = company.getId();
		sql = "DELETE FROM Companies WHERE ID = " + id;
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			int affectedRows = pstmt.executeUpdate();
			if (affectedRows == 0) {
				ConnectionPool.getInstance().returnConnection(con);
				return false;
			}
			ConnectionPool.getInstance().returnConnection(con);
			return true;
		} catch (SQLException e) {
			throw new CouponException("Failed to remove Company.");
		}
	}

	/**
	 * method for updating the email and password attributes of one company.
	 * 
	 * @param company
	 *            bean object representing company to be updated.
	 * @throws CouponException
	 *             - if database error has occured.
	 */
	@Override
	public void updateCompany(Company company) throws CouponException {
		sql = "UPDATE Companies SET password = ?, email = ? WHERE (id =  " + company.getId() + ")";
		con = ConnectionPool.getInstance().getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, company.getPassword());
			pstmt.setString(2, company.getEmail());
			pstmt.executeUpdate();

		} catch (SQLException e) {
			throw new CouponException("Failed to update Company.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	/**
	 * METHOD NOT CURRENTLY IN USE. method for updating one company's name. deemed
	 * unneccessary by the client.
	 * 
	 * @param company
	 *            bean object to be updated
	 * @throws CouponException
	 *             - if database error has occured.
	 */
	public void updateCompanyName(Company company) throws CouponException {
		sql = "UPDATE Companies SET compname = ? WHERE id = " + company.getId() + ")";
		con = ConnectionPool.getInstance().getConnection();
		try {
			PreparedStatement pstmt;
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, company.getCompName());
			pstmt.executeUpdate();
		} catch (SQLException e) {
			throw new CouponException("Database Error has occured.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	/**
	 * method for getting a specific company's details. only id is needed for
	 * verification.
	 * 
	 * @param id
	 *            representing company to be pulled from database
	 * @return Company bean object representing company.
	 * @throws CouponException
	 *             - if database threw an exception.
	 * @throws DoesntExistException
	 *             - if company could not be found.
	 */
	@Override
	public Company getCompany(Long id) throws CouponException {
		con = ConnectionPool.getInstance().getConnection();
		String sql = "SELECT * FROM Companies WHERE ID = ?";
		PreparedStatement pstmt;
		try {
			if (id == null) {
				throw new NullException("id cannot be null.");

			}
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, id);
			Company company = new Company();
			ResultSet rs = pstmt.executeQuery();

			// getting company attributes
			if (rs.next()) {
				company.setId(rs.getLong(1));
				company.setCompName(rs.getString(2));
				company.setPassword(rs.getString(3));
				company.setEmail(rs.getString(4));
				// System.out.println("=== TEST ===" + company);
			} else {
				throw new DoesntExistException("Could not find Company with ID: " + id);
			}

			return company;
		} catch (SQLException e) {
			throw new CouponException("Failed to get Company.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	/**
	 * gets all Companies from Companies Table.
	 * 
	 * @return ArrayList<Company> containing all Companies in Companies Table.
	 *         throws CouponException if database query failed.
	 **/
	@Override
	public List<Company> getAllCompanies() throws CouponException {
		con = ConnectionPool.getInstance().getConnection();
		sql = "SELECT * FROM Companies";
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			List<Company> companies = new ArrayList<>();
			while (rs.next()) {
				Company company = new Company();
				company.setId(rs.getLong(1));
				company.setCompName(rs.getString(2));
				company.setPassword(rs.getString(3));
				company.setEmail(rs.getString(4));
				companies.add(company);
			}
			return companies;
		} catch (SQLException e) {
			throw new CouponException("Failed to get All Companies.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	public List<Company> getAllCompaniesByPage(int page, int size) throws CouponException {
		con = ConnectionPool.getInstance().getConnection();
		sql = "SELECT * FROM Companies OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, page * size);
			pstmt.setInt(2, size);
			ResultSet rs = pstmt.executeQuery();
			List<Company> companies = new ArrayList<>();
			while (rs.next()) {
				Company company = new Company();
				company.setId(rs.getLong(1));
				company.setCompName(rs.getString(2));
				company.setPassword(rs.getString(3));
				company.setEmail(rs.getString(4));
				companies.add(company);
			}
			return companies;
		} catch (SQLException e) {
			throw new CouponException("Failed to get All Companies.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	/**
	 * private method gets IDs of coupons belonging to company
	 * 
	 * @param company
	 * @param con
	 * @return array of Coupons with only ID values
	 * @throws SQLException
	 */
	private ArrayList<Coupon> getCouponId(Company company, Connection con) throws SQLException {
		ArrayList<Coupon> tempCoupons = new ArrayList<Coupon>();
		PreparedStatement pstmt;

		// getting coupon's ID
		sql = "SELECT * FROM Company_Coupon WHERE (companyid = ?)";
		pstmt = con.prepareStatement(sql);
		pstmt.setLong(1, company.getId());
		ResultSet rs = pstmt.executeQuery();

		// getting all the company coupon's ID and putting them in a temporary list
		while (rs.next()) {
			Coupon coupon = new Coupon();
			coupon.setId(rs.getLong(2));
			tempCoupons.add(coupon);
		}

		return tempCoupons;

	}

	private ArrayList<Coupon> getCouponIdByPage(Company company, Connection con, int page, int size)
			throws SQLException {
		ArrayList<Coupon> tempCoupons = new ArrayList<Coupon>();
		PreparedStatement pstmt;

		// getting coupon's ID
		sql = "SELECT * FROM Company_Coupon WHERE (companyid = ?) OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";
		pstmt = con.prepareStatement(sql);
		pstmt.setLong(1, company.getId());
		pstmt.setInt(2, page * size);
		pstmt.setInt(3, size);
		ResultSet rs = pstmt.executeQuery();

		// getting all the company coupon's ID and putting them in a temporary list
		while (rs.next()) {
			Coupon coupon = new Coupon();
			coupon.setId(rs.getLong(2));
			tempCoupons.add(coupon);
		}

		return tempCoupons;

	}

	/**
	 * method for getting a list of coupons belonging to this company.
	 * 
	 * @param company
	 *            bean object representing the company whom the coupons belong to.
	 * @return an ArrayList of coupons belonging to this company.
	 * @throws CouponException
	 *             - if a database error has occured.
	 */
	@Override
	public ArrayList<Coupon> getCoupons(Company company) throws CouponException {
		con = ConnectionPool.getInstance().getConnection();
		try {
			ArrayList<Coupon> tempCoupons = getCouponId(company, con);

			PreparedStatement pstmt;

			// sending a query to get the company's coupons full details
			sql = "SELECT * FROM Coupons WHERE (ID = ?)";
			pstmt = con.prepareStatement(sql);

			for (Coupon currentCoupon : tempCoupons) {
				// setting where conditions to current coupon in the list
				pstmt.setLong(1, currentCoupon.getId());
				ResultSet rs = pstmt.executeQuery();
				rs.next();
				// finally getting all the coupon's details in templist
				currentCoupon.setTitle(rs.getString(2));
				currentCoupon.setStartDate(rs.getTimestamp(3));
				currentCoupon.setEndDate(rs.getTimestamp(4));
				currentCoupon.setAmount(rs.getInt(5));
				currentCoupon.setType(CouponType.valueOf(rs.getString(6)));
				currentCoupon.setMessage(rs.getString(7));
				currentCoupon.setImage(rs.getString(9));
				currentCoupon.setPrice(rs.getDouble(8));

				// setting temp list in company list
			}
			company.setCoupons(tempCoupons);
			return company.getCoupons();
		} catch (SQLException e) {
			throw new CouponException("failed to get " + company.getCompName() + "'s Coupons.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}

	}

	public ArrayList<Coupon> getCouponsByPage(Company company, int page, int size) throws CouponException {
		con = ConnectionPool.getInstance().getConnection();
		try {
			ArrayList<Coupon> tempCoupons = getCouponIdByPage(company, con, page, size);

			PreparedStatement pstmt;

			// sending a query to get the company's coupons full details
			sql = "SELECT * FROM Coupons WHERE (ID = ?)";
			pstmt = con.prepareStatement(sql);
			for (Coupon currentCoupon : tempCoupons) {
				// setting where conditions to current coupon in the list
				pstmt.setLong(1, currentCoupon.getId());
				ResultSet rs = pstmt.executeQuery();
				rs.next();
				// finally getting all the coupon's details in templist
				currentCoupon.setTitle(rs.getString(2));
				currentCoupon.setStartDate(rs.getTimestamp(3));
				currentCoupon.setEndDate(rs.getTimestamp(4));
				currentCoupon.setAmount(rs.getInt(5));
				currentCoupon.setType(CouponType.valueOf(rs.getString(6)));
				currentCoupon.setMessage(rs.getString(7));
				currentCoupon.setImage(rs.getString(9));
				currentCoupon.setPrice(rs.getDouble(8));

				// setting temp list in company list
			}
			company.setCoupons(tempCoupons);
			return company.getCoupons();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new CouponException("failed to get " + company.getCompName() + "'s Coupons.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}

	}

	/**
	 * method for validating login attempt by a company, checking if username and
	 * password are correct.<br>
	 * called by logging into Coupon System and passing Company type parameter,
	 * passed to CompanyFacade and then here. <br>
	 * this method will return "-1" id if company was not found. Facade will throw
	 * an exception.
	 * 
	 * @param compName
	 * @param password
	 *            parameters given by CouponSystem, rolled to facade and then to
	 *            this method, to validate their existance in the database.
	 * @return if parameters are true, an id of this company will be returned to
	 *         facade.
	 * @throws CouponException
	 *             - if a database error has occurred.
	 */
	@Override
	public long login(String compName, String password) throws CouponException {
		con = ConnectionPool.getInstance().getConnection();
		sql = "SELECT * FROM Companies WHERE (name = ? AND password = ?)";
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, compName);
			pstmt.setString(2, password);
			ResultSet rs = pstmt.executeQuery();
			long id = -1;
			if (rs.next()) {
				id = rs.getLong(1);
				return id;
			}
			return id;
		} catch (SQLException e) {
			throw new CouponException("Failed to retrieve Company.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	/**
	 * original login method as requested.
	 * 
	 * @param compName
	 * @param password
	 * @return
	 * @throws CouponException
	 */
	public boolean login1(String compName, String password) throws CouponException {
		con = ConnectionPool.getInstance().getConnection();
		sql = "SELECT * FROM Companies WHERE (name = ? AND password = ?)";
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, compName);
			pstmt.setString(2, password);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				return true;

			return false;
		} catch (SQLException e) {
			throw new CouponException("Failed to retrieve Company.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	/**
	 * method links Coupon bean object to company_coupon join table
	 * 
	 * @param coupon
	 * @param id
	 * @throws CouponException
	 */
	public void linkCouponToCompany(Coupon coupon, long id) throws CouponException {
		long couponId = coupon.getId();
		con = ConnectionPool.getInstance().getConnection();
		PreparedStatement pstmt;
		sql = "INSERT INTO Company_Coupon VALUES(?,?)";
		try {
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, id);
			pstmt.setLong(2, couponId);
			int row = pstmt.executeUpdate();
			if (row == 0) {
				throw new CouponException("Coupon could not be added to company.");
			}
		} catch (SQLException e) {
			throw new CouponException("Coupon could not be linked, is already linked to this company.");
		} finally {

			ConnectionPool.getInstance().returnConnection(con);
		}
	}

	/**
	 * method for getting a company's ID. if a company bean object exists and id is
	 * missing, this method will allow for id retrieval.
	 * 
	 * @param companyName
	 * @return Long id - this company's ID.
	 * @throws CouponException
	 */
	public Long getCompanyId(Company company) throws CouponException {
		con = ConnectionPool.getInstance().getConnection();
		sql = "SELECT * FROM Companies WHERE name = ?";
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, company.getCompName());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				Company foundCompany = new Company();
				foundCompany.setId(rs.getLong(1));
				foundCompany.setCompName(rs.getString(2));
				if (company.getCompName().equals(foundCompany.getCompName())) {
					Long id = foundCompany.getId();
					return id;
				}
			} else {
				throw new DoesntExistException("company was not found.");
			}
			// should never reach this code
			return -1L;
		} catch (SQLException e) {
			throw new CouponException("failed to get company ID.");
		} finally {
			ConnectionPool.getInstance().returnConnection(con);
		}

	}

}
